{
	"info": {
		"_postman_id": "7957fb3a-9487-44ef-be04-8a5a4664c02f",
		"name": "QA Assessment - API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20833659"
	},
	"item": [
		{
			"name": "Negative Testing",
			"item": [
				{
					"name": "Create New User - Missing API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"title\", \"Mrs\");\r",
									"pm.collectionVariables.set(\"firstName\", \"Monica\");\r",
									"pm.collectionVariables.set(\"lastName\", \"Sagne\");\r",
									"pm.collectionVariables.set(\"dateOfBirth\", \"1987-06-04\");\r",
									"pm.collectionVariables.set(\"email\", \"johndoe12@gmail.com\");\r",
									"pm.collectionVariables.set(\"password\", \"supersecretpassword\");\r",
									"pm.collectionVariables.set(\"rating\", 8);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"rating\": {{rating}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New User Missing Field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"title\", \"Mrs\");\r",
									"pm.collectionVariables.set(\"lastName\", \"Sagne\");\r",
									"pm.collectionVariables.set(\"dateOfBirth\", \"1987-06-04\");\r",
									"pm.collectionVariables.set(\"email\", \"johndoe12@gmail.com\");\r",
									"pm.collectionVariables.set(\"password\", \"supersecretpassword\");\r",
									"pm.collectionVariables.set(\"rating\", 8);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "GombImxOhMCa8AqMmNM9KEFwaSHSFHty",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"rating\": {{rating}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New User Invalid Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"title\", \"Mrs\");\r",
									"pm.collectionVariables.set(\"firstName\", \"Monica\");\r",
									"pm.collectionVariables.set(\"lastName\", \"Sagne\");\r",
									"pm.collectionVariables.set(\"dateOfBirth\", \"1987-06-04\");\r",
									"pm.collectionVariables.set(\"email\", \"johndoe12@\");\r",
									"pm.collectionVariables.set(\"password\", \"supersecretpassword\");\r",
									"pm.collectionVariables.set(\"rating\", 8);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "GombImxOhMCa8AqMmNM9KEFwaSHSFHty",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"rating\": {{rating}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user account details Invalid Userid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "GombImxOhMCa8AqMmNM9KEFwaSHSFHty",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{invaliduserId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{invaliduserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Basic Testing",
			"item": [
				{
					"name": "Create New User With New Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"title\", \"Mrs\");\r",
									"pm.collectionVariables.set(\"firstName\", \"Monica\");\r",
									"pm.collectionVariables.set(\"lastName\", \"Sagne\");\r",
									"pm.collectionVariables.set(\"dateOfBirth\", \"1987-06-04\");\r",
									"pm.collectionVariables.set(\"email\", \"johndoe12@gmail.com\");\r",
									"pm.collectionVariables.set(\"password\", \"supersecretpassword\");\r",
									"pm.collectionVariables.set(\"rating\", 4);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 'Success'\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data object is present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"User ID is present and valid\", function () {\r",
									"    pm.expect(jsonData.data).to.have.property(\"userId\");\r",
									"    pm.expect(jsonData.data.userId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Title is 'Mrs'\", function () {\r",
									"    pm.expect(jsonData.data.title).to.eql(\"Mrs\");\r",
									"});\r",
									"\r",
									"pm.test(\"First name should be present in the response'\", function () {\r",
									"    pm.expect(jsonData.data.firstName).to.eql(pm.collectionVariables.get(\"firstName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Last name should be present in the response'\", function () {\r",
									"    pm.expect(jsonData.data.lastName).to.eql(pm.collectionVariables.get(\"lastName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Date of Birth should be present in the response'\", function () {\r",
									"    pm.expect(jsonData.data.dateOfBirth).to.eql(pm.collectionVariables.get(\"dateOfBirth\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Email should be present in the response'\", function () {\r",
									"    pm.expect(jsonData.data.email).to.eql(pm.collectionVariables.get(\"email\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Password is \", function () {\r",
									"    pm.expect(jsonData.data.password).to.eql(pm.collectionVariables.get(\"password\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Rating is \", function () {\r",
									"    pm.expect(jsonData.data.rating).to.eql(pm.collectionVariables.get(\"rating\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 'new'\", function () {\r",
									"    pm.expect(jsonData.data.status).to.eql(\"new\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error is null\", function () {\r",
									"    pm.expect(jsonData.error).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.data && jsonData.data.userId) {\r",
									"    pm.environment.set(\"userId\", jsonData.data.userId);\r",
									"    console.log(\"User ID stored in environment variable: \" + jsonData.data.userId);\r",
									"} else {\r",
									"    console.log(\"User ID not found in the response\");\r",
									"}\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\",\r",
									"          \"pattern\": \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"\r",
									"        },\r",
									"        \"title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"firstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"dateOfBirth\": {\r",
									"          \"type\": \"string\",\r",
									"          \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\",\r",
									"          \"format\": \"email\"\r",
									"        },\r",
									"        \"password\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"rating\": {\r",
									"          \"type\": \"integer\",\r",
									"          \"minimum\": 0,\r",
									"          \"maximum\": 10\r",
									"        },\r",
									"        \"status\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\"userId\", \"firstName\", \"lastName\", \"dateOfBirth\", \"email\", \"password\", \"rating\", \"status\"]\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": [\"null\", \"object\"]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"status\", \"data\", \"error\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 'Success'\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data object is present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"User ID is present and valid\", function () {\r",
									"    pm.expect(jsonData.data).to.have.property(\"userId\");\r",
									"    pm.expect(jsonData.data.userId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "GombImxOhMCa8AqMmNM9KEFwaSHSFHty",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"rating\": {{rating}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New User API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"title\", \"Mrs\");\r",
									"pm.collectionVariables.set(\"firstName\", \"Monica\");\r",
									"pm.collectionVariables.set(\"lastName\", \"Sagne\");\r",
									"pm.collectionVariables.set(\"dateOfBirth\", \"1987-06-04\");\r",
									"pm.collectionVariables.set(\"email\", \"johndoe12@gmail.com\");\r",
									"pm.collectionVariables.set(\"password\", \"supersecretpassword\");\r",
									"pm.collectionVariables.set(\"rating\", 8);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 'Success'\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data object is present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"User ID is present and valid\", function () {\r",
									"    pm.expect(jsonData.data).to.have.property(\"userId\");\r",
									"    pm.expect(jsonData.data.userId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Title is 'Mrs'\", function () {\r",
									"    pm.expect(jsonData.data.title).to.eql(\"Mrs\");\r",
									"});\r",
									"\r",
									"pm.test(\"First name should be present in the response'\", function () {\r",
									"    pm.expect(jsonData.data.firstName).to.eql(pm.collectionVariables.get(\"firstName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Last name should be present in the response'\", function () {\r",
									"    pm.expect(jsonData.data.lastName).to.eql(pm.collectionVariables.get(\"lastName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Date of Birth should be present in the response'\", function () {\r",
									"    pm.expect(jsonData.data.dateOfBirth).to.eql(pm.collectionVariables.get(\"dateOfBirth\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Email should be present in the response'\", function () {\r",
									"    pm.expect(jsonData.data.email).to.eql(pm.collectionVariables.get(\"email\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Password is \", function () {\r",
									"    pm.expect(jsonData.data.password).to.eql(pm.collectionVariables.get(\"password\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Rating is \", function () {\r",
									"    pm.expect(jsonData.data.rating).to.eql(pm.collectionVariables.get(\"rating\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 'active'\", function () {\r",
									"    pm.expect(jsonData.data.status).to.eql(\"active\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error is null\", function () {\r",
									"    pm.expect(jsonData.error).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.data && jsonData.data.userId) {\r",
									"    pm.environment.set(\"userId\", jsonData.data.userId);\r",
									"    console.log(\"User ID stored in environment variable: \" + jsonData.data.userId);\r",
									"} else {\r",
									"    console.log(\"User ID not found in the response\");\r",
									"}\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\",\r",
									"          \"pattern\": \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"\r",
									"        },\r",
									"        \"title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"firstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"dateOfBirth\": {\r",
									"          \"type\": \"string\",\r",
									"          \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\",\r",
									"          \"format\": \"email\"\r",
									"        },\r",
									"        \"password\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"rating\": {\r",
									"          \"type\": \"integer\",\r",
									"          \"minimum\": 0,\r",
									"          \"maximum\": 10\r",
									"        },\r",
									"        \"status\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\"userId\", \"firstName\", \"lastName\", \"dateOfBirth\", \"email\", \"password\", \"rating\", \"status\"]\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": [\"null\", \"object\"]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"status\", \"data\", \"error\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 'Success'\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data object is present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"User ID is present and valid\", function () {\r",
									"    pm.expect(jsonData.data).to.have.property(\"userId\");\r",
									"    pm.expect(jsonData.data.userId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "GombImxOhMCa8AqMmNM9KEFwaSHSFHty",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"rating\": {{rating}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user account details API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test if the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test if the status is 'Success'\r",
									"pm.test(\"Status is 'Success'\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"// Test if the userId matches the one stored in the environment variable\r",
									"pm.test(\"User ID matches\", function () {\r",
									"    pm.expect(jsonData.data.userId).to.eql(pm.environment.get(\"userId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property('firstName');\r",
									"    pm.expect(jsonData.data).to.have.property('lastName');\r",
									"    pm.expect(jsonData.data).to.have.property('email');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "GombImxOhMCa8AqMmNM9KEFwaSHSFHty",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{userId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "dateOfBirth",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "rating",
			"value": ""
		}
	]
}